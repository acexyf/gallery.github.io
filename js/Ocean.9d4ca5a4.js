"use strict";(self["webpackChunkcreation_gallery"]=self["webpackChunkcreation_gallery"]||[]).push([[632],{4040:function(t,e,r){r.d(e,{Z:function(){return d}});var n=r(185),o=r(6954),i=r.n(o),a=r(7557),s=r(5932);const l={domId:"webgl-output",initPosition:new n.Pa4(20,10,10),fov:60,near:1,far:1e4,rendererOptions:{},clearColor:new n.Ilk(9737626),showStats:!1,helper:0,exposure:1,enableDamping:!0};class d{constructor(t){const e=l;(0,s.Kn)(t)&&Object.assign(e,t);const{fov:r,near:o,far:d,initPosition:c,rendererOptions:u={},clearColor:m,domId:v,showStats:p,helper:f,exposure:h,enableDamping:w}=e;this.scene=new n.xsS,this.camera=new n.cPb(r,window.innerWidth/window.innerHeight,o,d),this.camera.position.copy(c),this.camera.lookAt(this.scene.position);let g={antialias:!0};if((0,s.Kn)(u)&&(g=Object.assign({},g,u)),this.renderer=new n.CP7(g),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=n.ntZ,this.renderer.setClearColor(m),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.toneMapping=n.EoG,this.renderer.toneMappingExposure=h,this.renderer.physicallyCorrectLights=!0,this.renderer.setPixelRatio(window.devicePixelRatio),document.getElementById(v)?.append(this.renderer.domElement),this.orbitControls=new a.z(this.camera,this.renderer.domElement),this.orbitControls.enableDamping=w,this.clock=new n.SUY,(0,s.hj)(f)&&f>0&&this.scene.add(new n.y8_(f)),p){const t=new(i());this.stats=t,document.body.appendChild(t.dom)}}render(){this.orbitControls.update(),this.stats&&this.stats.update(),this.beforeRender&&this.beforeRender(),requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera)}}},8672:function(t,e,r){r.r(e),r.d(e,{default:function(){return v}});var n=r(4310),o=r(4040),i=r(185);class a extends i.Kj0{constructor(t,e={}){super(t),this.isWater=!0;const r=this,n=void 0!==e.textureWidth?e.textureWidth:512,o=void 0!==e.textureHeight?e.textureHeight:512,a=void 0!==e.clipBias?e.clipBias:0,s=void 0!==e.alpha?e.alpha:1,l=void 0!==e.time?e.time:0,d=void 0!==e.waterNormals?e.waterNormals:null,c=void 0!==e.sunDirection?e.sunDirection:new i.Pa4(.70707,.70707,0),u=new i.Ilk(void 0!==e.sunColor?e.sunColor:16777215),m=new i.Ilk(void 0!==e.waterColor?e.waterColor:8355711),v=void 0!==e.eye?e.eye:new i.Pa4(0,0,0),p=void 0!==e.distortionScale?e.distortionScale:20,f=void 0!==e.side?e.side:i.Wl3,h=void 0!==e.fog&&e.fog,w=new i.JOQ,g=new i.Pa4,x=new i.Pa4,y=new i.Pa4,C=new i.yGw,b=new i.Pa4(0,0,-1),P=new i.Ltg,S=new i.Pa4,M=new i.Pa4,_=new i.Ltg,D=new i.yGw,k=new i.cPb,z=new i.dd2(n,o),W={uniforms:i.rDY.merge([i.rBU.fog,i.rBU.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new i.yGw},sunColor:{value:new i.Ilk(8355711)},sunDirection:{value:new i.Pa4(.70707,.70707,0)},eye:{value:new i.Pa4},waterColor:{value:new i.Ilk(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},N=new i.jyz({fragmentShader:W.fragmentShader,vertexShader:W.vertexShader,uniforms:i.rDY.clone(W.uniforms),lights:!0,side:f,fog:h});N.uniforms["mirrorSampler"].value=z.texture,N.uniforms["textureMatrix"].value=D,N.uniforms["alpha"].value=s,N.uniforms["time"].value=l,N.uniforms["normalSampler"].value=d,N.uniforms["sunColor"].value=u,N.uniforms["waterColor"].value=m,N.uniforms["sunDirection"].value=c,N.uniforms["distortionScale"].value=p,N.uniforms["eye"].value=v,r.material=N,r.onBeforeRender=function(t,e,n){if(x.setFromMatrixPosition(r.matrixWorld),y.setFromMatrixPosition(n.matrixWorld),C.extractRotation(r.matrixWorld),g.set(0,0,1),g.applyMatrix4(C),S.subVectors(x,y),S.dot(g)>0)return;S.reflect(g).negate(),S.add(x),C.extractRotation(n.matrixWorld),b.set(0,0,-1),b.applyMatrix4(C),b.add(y),M.subVectors(x,b),M.reflect(g).negate(),M.add(x),k.position.copy(S),k.up.set(0,1,0),k.up.applyMatrix4(C),k.up.reflect(g),k.lookAt(M),k.far=n.far,k.updateMatrixWorld(),k.projectionMatrix.copy(n.projectionMatrix),D.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),D.multiply(k.projectionMatrix),D.multiply(k.matrixWorldInverse),w.setFromNormalAndCoplanarPoint(g,x),w.applyMatrix4(k.matrixWorldInverse),P.set(w.normal.x,w.normal.y,w.normal.z,w.constant);const o=k.projectionMatrix;_.x=(Math.sign(P.x)+o.elements[8])/o.elements[0],_.y=(Math.sign(P.y)+o.elements[9])/o.elements[5],_.z=-1,_.w=(1+o.elements[10])/o.elements[14],P.multiplyScalar(2/P.dot(_)),o.elements[2]=P.x,o.elements[6]=P.y,o.elements[10]=P.z+1-a,o.elements[14]=P.w,v.setFromMatrixPosition(n.matrixWorld);const i=t.getRenderTarget(),s=t.xr.enabled,l=t.shadowMap.autoUpdate;r.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(z),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,k),r.visible=!0,t.xr.enabled=s,t.shadowMap.autoUpdate=l,t.setRenderTarget(i);const d=n.viewport;void 0!==d&&t.state.viewport(d)}}}class s extends o.Z{constructor(){super({initPosition:new i.Pa4(30,30,100),clearColor:new i.Ilk(0),fov:75,near:1,far:1e4,helper:10}),this.initMeshes(),this.render()}initMeshes(){this.sun=new i.Pa4(-80,5,-100),this.water=new a(new i._12(1e4,1e4),{textureWidth:512,textureHeight:512,waterNormals:(new i.dpR).load("/images/textures/waternormals.jpg",(t=>{t.wrapS=t.wrapT=i.rpg})),sunDirection:this.sun,sunColor:16777215,waterColor:7695}),this.water.rotation.x=-Math.PI/2,this.scene.add(this.water)}beforeRender(){}}const l={id:"webgl-output"},d={name:"Ocean"};var c=Object.assign(d,{setup(t){return(0,n.bv)((()=>{new s})),(t,e)=>((0,n.wg)(),(0,n.iD)("div",l))}}),u=r(1256);const m=(0,u.Z)(c,[["__scopeId","data-v-79449ce7"]]);var v=m}}]);